class Solution:
    # Solution 1 KMP Algorithm
    def getNext(self, s):
        n = len(s)
        Next = [-1 for i in range(n)]
        k, j = -1, 0
        while j < n-1:
            if k == -1 or s[k] == s[j]:
                k += 1
                j += 1
                Next[j] = k
            else:
                k = Next[k]
        return Next
    
    def strStr_1(self, haystack: str, needle: str) -> int:
        if needle == '':
            return 0
        Next = self.getNext(needle)
        i, j = 0, 0
        while i < len(haystack) and j < len(needle):
            if j == -1 or haystack[i] == needle[j]:
                i += 1
                j += 1
            else:
                j = Next[j]
        if j == len(needle):
            return i - j
        else:
            return -1

    # Solution 2 string.find
    def strStr_2(self, haystack: str, needle: str) -> int:
        return haystack.find(needle)