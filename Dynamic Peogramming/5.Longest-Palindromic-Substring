class Solution:
    # Solution 1 Brute Force
    def isPalinromic(self, s):
        lenS = len(s)
        left, right = 0, lenS - 1
        while left < right:
            if s[left] == s[right]:
                left += 1
                right -= 1
            else:
                return False
        return True

    def longestPalindrome_1(self, s: str) -> str:
        if len(s) == 0 or len(s) == 1:
            return s
        res = s[0]
        for i in range(len(s) - 1):
            for j in range(i + 1, len(s)):
                if self.isPalinromic(s[i:j+1]):
                    if len(s[i:j+1]) > len(res):
                        res = s[i:j+1]
        return res

    # Solution 2 Expand Around Center
    def getLongest(self, s, l, r):
        while l >= 0 and r < len(s) and s[l] == s[r]:
            l -= 1
            r += 1
        return s[l+1:r]

    def longestPalindrome_2(self, s: str) -> str:
        res = ""
        for i in range(len(s)):
            string1 = self.getLongest(s, i, i)
            if len(string1) > len(res):
                res = string1
        for i in range(len(s) - 1):
            string2 = self.getLongest(s, i, i+1)
            if len(string2) > len(res):
                res = string2
        return res

    # Solution 3 Dynamic Programming
    def longestPalindrome_3(self, s: str) -> str:
        n = len(s)
        if n == 0 or n == 1:
            return s
        dp = [[0 for _ in range(n)]for _ in range(n)]
        l, r, maxL = 0, 0, 0
        for i in range(n):
            for j in range(i):
                dp[j][i] = (s[i] == s[j]) and (i - j < 2 or dp[j+1][i-1])
                if dp[j][i] and maxL < i - j + 1:
                    maxL = i - j + 1
                    l = j
                    r = i
            dp[i][i] = 1
        return s[l: r + 1]
