class Solution:
    # Solution 1 My own Solution O(N^3)
    def fourSum_1(self, nums: List[int], target: int) -> List[List[int]]:
        nums.sort()
        res = []
        n = len(nums)
        if n == 0:
            return []
        for i in range(n-3):
            if nums[i] != nums[i-1] or i == 0:
                for j in range(i+1, n-2):
                    if nums[j] != nums[j-1] or j == i+1:
                        l, r = j+1, n-1
                        while l < r:
                            if nums[l] + nums[r] == target - nums[i] - nums[j]:
                                res.append(
                                    [nums[i], nums[j], nums[l], nums[r]])
                                while l < r:
                                    l += 1
                                    if nums[l] != nums[l-1]:
                                        break
                                while l < r:
                                    r -= 1
                                    if nums[r] != nums[r+1]:
                                        break
                            elif nums[l] + nums[r] > target - nums[i] - nums[j]:
                                r -= 1
                            elif nums[l] + nums[r] < target - nums[i] - nums[j]:
                                l += 1
        return res
    
    # Solution 2 Hash Map O(N^2)
    def fourSum_2(self, nums: List[int], target: int) -> List[List[int]]:
        nums.sort()
        numLen, res, keys = len(nums), set(), {}
        if numLen < 4:
            return []
        for i in range(numLen - 1):
            for j in range(i+1, numLen):
                if nums[i] + nums[j] not in keys:
                    keys[nums[i] + nums[j]] = [(i, j)]
                else:
                    keys[nums[i] + nums[j]].append((i, j))
        for p in range(numLen-1):
            for q in range(p+1, numLen):
                T = target - nums[p] - nums[q]
                if T in keys:
                    for k in keys[T]:
                        if k[0] > q:
                            res.add((nums[p], nums[q], nums[k[0]], nums[k[1]]))
        return [list(i) for i in res]
