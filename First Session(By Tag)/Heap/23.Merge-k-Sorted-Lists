# Definition for singly-linked list.
class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None

class Solution:
    # Solution 1 Traverse (TLE)
    def merge2Lists(self, l1, l2):
        cur = ListNode(0)
        res = cur
        while l1 and l2:
            if l1.val > l2.val:
                node = ListNode(l2.val)
                l2 = l2.next
            else:
                node = ListNode(l1.val)
                l1 = l1.next
            cur.next = node
            cur = cur.next
        l = l1 if l1 else l2
        cur.next = l
        return res.next

    def mergeKLists_1(self, lists: List[ListNode]) -> ListNode:
        if len(lists) == 0:
            return
        elif len(lists) == 1:
            return lists[0]
        res = lists[0]
        for i in range(1, len(lists)):
            res = self.merge2Lists(res, lists[i])
        return res
    
    # Solution 2 Minimum-Heap
    def mergeKLists_2(self, lists: List[ListNode]) -> ListNode:
        heap = []
        for i, l in enumerate(lists):
            if l:
                heap.append((l.val, i))
        heapq.heapify(heap)
        head = ListNode(0)
        cur = head
        count = 0
        while heap:
            curVal, curIndex = heapq.heappop(heap)
            cur.next = ListNode(curVal)
            cur = cur.next
            curHead = lists[curIndex]
            if curHead.next:
                curHead = curHead.next
                lists[curIndex] = curHead
                heapq.heappush(heap, (curHead.val, curIndex))
        return head.next
