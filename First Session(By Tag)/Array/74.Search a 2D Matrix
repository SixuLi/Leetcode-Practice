# Solution 1: Two Binary Search
class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        m = len(matrix)
        if m == 0:
            return False
        n = len(matrix[0])
        if n == 0:
            return False
        up, down = 0, m
        while up < down:
            mid = (up + down) // 2
            if target == matrix[mid][0]:
                return True
            elif matrix[mid][0] < target:
                up = mid+1
            else:
                down = mid
        up -= 1
        left, right = 0, n
        while left < right:
            mid = (left + right) // 2
            if target == matrix[up][mid]:
                return True
            elif matrix[up][mid] < target:
                left = mid+1
            else:
                right = mid
        return False

# Solution 2:
class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        if not matrix:
            return False
        row, col = 0, len(matrix[0]) - 1
        while row < len(matrix) and col >= 0:
            if matrix[row][col] == target:
                return True
            elif matrix[row][col] < target:
                if col != len(matrix[0]) - 1:
                    break
                row += 1
            else:
                col -= 1
        return False