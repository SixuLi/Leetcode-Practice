# Solution 1: Scan the Array(Time Complexity O(N))
# If current sum is positve, we should add this sum in the next addition, else if current sum is negetive,
# we should abandon this sum and begin a new addition process.
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        res = float('-inf')
        cur, pre = 0, 0
        for i in range(len(nums)):
            cur = nums[i] + (pre if pre > 0 else 0)
            pre = cur
            res = max(res, cur)
        return res

# Solution 2: Dynamic Programming(Time Complexity O(N))
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        n = len(nums)
        dp = [0 for i in range(n)]
        dp[0] = nums[0]
        res = dp[0]
        for i in range(1,n):
            dp[i] = nums[i] + (dp[i-1] if dp[i-1] > 0 else 0)
            res = max(res, dp[i])
        return res
# Solution 3: Divide and Conquer(Left for Next Time learning systematically)