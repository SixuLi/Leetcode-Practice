# Solution 1:
# My own Solution: Use four bounds(top, bottom, left, right) to force the path going in spiral way.
class Solution:
    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
        res = []
        if not matrix:
            return res
        row, col = len(matrix), len(matrix[0])
        up, down, left, right = 0, row, 0, col
        i, j = 0, 0
        count, total = 0, row*col
        while count < total:
            while i == up and j < right and count < total:
                res.append(matrix[i][j])
                j += 1
                count += 1
            if j == right:
                i += 1
                j -= 1
                up += 1
            while i < down and j == right-1 and count < total:
                res.append(matrix[i][j])
                i += 1
                count += 1
            if i == down:
                i -= 1
                j -= 1
                right -= 1
            while i == down-1 and j > left and count < total:
                res.append(matrix[i][j])
                j -= 1
                count += 1
            if j == left:
                down -= 1
            while j == left and i > up and count < total:
                res.append(matrix[i][j])
                i -= 1
                count += 1
            if i == up:
                left += 1
        return res

# Solution 2:
# Use another matrix to record whether the element has been visited.
class Solution:
    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
        if not matrix:
            return []
        res = []
        R, C = len(matrix), len(matrix[0])
        seen = [[False] * C for _ in matrix]
        dr = [0, 1, 0, -1]
        dc = [1, 0, -1, 0]
        r=c=di=0
        for _ in range(R*C):
            res.append(matrix[r][c])
            seen[r][c] = True
            nr = r + dr[di]
            nc = c + dc[di]
            if 0 <= nr < R and 0 <= nc < C and seen[nr][nc] == False:
                r = nr
                c = nc
            else:
                di = (di + 1) % 4
                r += dr[di]
                c += dc[di]
        return res